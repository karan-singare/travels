.row {
        /*if the device-width is not enough i.e. lesser than 114rem, then width of the element will be device-width*/
    max-width: $grid-width;
        /*this is the trick to center the block element inside the block element*/
    margin: 0 auto;
        /*selecting everything except last child */
    &:not(:last-child) {
        margin-bottom: $gutter-vertical;

        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small;
        }
    }

    @include clearfix;

    @include respond(tab-port) {
        max-width: 50rem;
        padding: 0 3rem;
    }

    /*
        * selecting elements having class which starts with "col-" => [class^="col-"]
        * selecting elements having class which ends with "col-" => [class$="col-"]
        * selecting elements having class which contanis "col-" => [class*="col-"]
    */
    [class^="col-"] {
        float: left;
        &:not(:last-child) {
            margin-right: $gutter-horizontal;

            @include respond(tab-port) {
                margin-right: 0;
                margin-bottom: $gutter-vertical-small;
            }
        }

        @include respond(tab-port) {
            width: 100% !important;
        }
    }

    .col-1-of-2 {
        /*to use the variables inside calc functions we neeed to use this syntax*/
        width: calc((100% - #{$gutter-horizontal})/2);
    }
    .col-1-of-3 {
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    }
    .col-1-of-4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    }
    .col-2-of-3 {
        width: calc(((100% - 2 * #{$gutter-horizontal}) / 3) * 2 + #{$gutter-horizontal});
    }
    .col-2-of-4 {
        width: calc(((100% - 3 * #{$gutter-horizontal}) / 4) * 2 +  #{$gutter-horizontal});
    }
    .col-3-of-4 {
        width: calc(((100% - 3 * #{$gutter-horizontal}) / 4) * 3 + 2 * #{$gutter-horizontal});
    }
}
